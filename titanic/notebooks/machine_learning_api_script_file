
from flask import Flask, request
import pandas as pd
import numpy as np
import json
import os

app = Flask(__name__)

# Load model and scaler files
model_path = os.path.join(os.path.pardir, os.path.pardir, 'models')
model_filepath = os.path.join(model_path, 'models', 'lr_model.pkl')
scaler_filepath = os.path.join(model_path, 'models', 'lr_scaler.pkl')

scaler = pickle.load(open(scaler_filepath))
model = pickle.load(open(model_filepath))

#columns
columns = ['Age', 'Fare', 'FamilySize', 
           'IsMother', 'IsMale', 'Deck_A', 'Deck_B', 'Deck_C', 'Deck_D', 'Deck_E', 'Deck_F', 'Deck_G', 'Deck_Z',
           'Pclass_1', 'Pclass_2', 'Pclass_3', 'Title_Lady', 'Title_Master', 'Title_Miss', 'Title_Mr',
           'Title_Mrs', 'Title_Officer', 'Title_Sir', 'Fare_Bin_very_low', 'Fare_Bin_low', 'Fare_Bin_high',
           'Fare_Bin_very_high', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'AgeState_Adult', 'AgeState_Child'
    
]

@app.route('/api', methods=['POST'])
def make_prediction():
    data = json.dumps(request.get_json(force=True))
    df = pd.read_json(data)
    passenger_ids = df['PassengerId'].ravel()
    actuals = df['Survived'].ravel()
    X = df[columns].as_matrix().astype('float')
    X_scaled = scaler.transform(X)
    predictions = model.predict(X_scaled)
    df_response = pd.Dataframe({
        'PassengerId':  passenger_ids,
        'Predicted': predictions,
        'Actual': actuals
    })
    return df_response.to_json()

if __name__ == '__main__':
    # host flask app at port 10001
    app.run(port=10001, debug=True)